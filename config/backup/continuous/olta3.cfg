/**
 * @brief Environment configuration
 *
 * Note for the action space definition: first define the number of actions,
 * then define the coordinate changes of each actions as done below.
 */
simulation_limit_time = 1000;
world_path = "./config/backup/continuous/cheese_world.cfg"; ///< world definition for continuous world
trajectory_output_path = "./data/trajectory_uct.csv"; ///< Path for trajectory backup
state_gaussian_stddev = .01; ///< Standard deviation of the Gaussian applied on the resulting state for the continuous world
misstep_probability = .0; ///< Probability for another action to be applied instead of the undertaken one
is_crash_terminal = false; ///< Set to true for terminal crash. If not, the angle of the agent is reverted in case of crash.

/**
 * @brief Agent initial configuration
 */
initial_state_x = 1.1; ///< Initial x coordinate
initial_state_y = 1.1; ///< Initial y coordinate
initial_state_v = .1; ///< Initial velocity
initial_state_theta = 180.; ///< Initial angle with x-axis (deg)

/**
 * @brief Actions configuration
 *
 * Action definition selector:
 * Set the number of actions and the parameters of each one as follows:
 * default: Cartesian coordinates
 *   The x coordinate of the ith action is called a<i>x
 *   The y coordinate of the ith action is called a<i>y
 * 0: Polar coordinates
 *   The magnitude of the ith action is called a<i>m
 *   The angle of the ith action is called a<i>a
 * 1: Navigation actions
 *   The number of angle variations is called nb_dtheta
 *   The ith angle variation is called dtheta<i>
 *   The number of velocity multiplicative factor is called nb_fvelocity
 *   The ith velocity multiplicative factor is called fvelocity<i>
 *   The max (resp min) velocity is called max_velocity (resp min_velocity)
 *
 * @warning Make sure the action space is compatible with the world configuration.
 * Particularly, if at a certain state any action leads to a wall, the 
 * simulation will stop.
 * @warning Action coordinates are double values.
 * @warning Angles unity must be degrees.
 */
action_definition_selector = 1; ///< Action definition (default is cartesian)
nb_actions = 8; ///< Number of actions for cartesian and polar definitions

/** Default: cartesian actions */
a0x =  0.; a0y = +1.;
a1x =  0.; a1y = -1.;
a2x = +1.; a2y =  0.;
a3x = -1.; a3y =  0.;

/** 0: polar actions (turned to cartesian afterwards) */
a0m = +.2; a0a =   0.;
a1m = +.2; a1a =  45.;
a2m = +.2; a2a =  90.;
a3m = +.2; a3a = 135.;
a4m = +.2; a4a = 180.;
a5m = +.2; a5a = 225.;
a6m = +.2; a6a = 270.;
a7m = +.2; a7a = 315.;

/** 1: navigation actions */
nb_dtheta = 3;
dtheta0 =   0.;
dtheta1 =  20.;
dtheta2 = -20.;
nb_fvelocity = 1;
fvelocity0 =  1.;
fvelocity1 =  .9;
fvelocity2 = 1.1;
max_velocity = .2;
min_velocity = 0.;

/**
 * @brief Policy configuration
 *
 * Policy selector:
 * default: random policy
 * 0: Go-straight policy
 * 1: OLUCT policy
 * 2: OLTA policy
 *
 * Default policy selector:
 * default: random policy
 * 0: go-straight policy
 */
policy_selector = 2;
discount_factor = .99; ///< discount factor

/* Model parameters for tree-search algorithms */
model_state_gaussian_stddev = .01; ///< Same as state_gaussian_stddev for the model used by the tree-search algorithms
model_misstep_probability = .0; ///< Same as misstep_probability for the model used by the tree-search algorithms

/* OLUCT parameters */
uct_cst = .8; ///< constant for UCT formula
tree_search_budget = 300; ///< budget for tree-search algorithms
default_policy_selector = 0;
default_policy_horizon = 50; ///< horizon for the default policy roll-out

/**
 * OLTA parameters
 * The values of the b<i>'s is an on/off boolean for the activation of a
 * particular decision criterion.
 */
b0 = true; ///< plain (default)
b1 = false; ///< plain with action validity test
b2 = false; ///< state distribution vmr test
b3 = true; ///< distance to state distribution test (Mahalanobis distance)
b4 = false; ///< return distribution variance test
vmr_threshold = .05; ///< Upper threshold for state distribution vmr test
distance_threshold = 1.; ///< Upper threshold for state distribution distance test
outcome_variance_threshold = .1; ///< Upper threshold for outcome distribution variance test

